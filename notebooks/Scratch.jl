using CSV, DataFrames, Statistics, Plots, LinearAlgebra

include("../src/SYKRE.jl")
using .SYKRE
using .SYKRE.SYK
using .SYKRE.SYKMatrix
using .SYKRE.SREMatrix


# function matrix_sres(L, βs, α, q, N, J; max_iters=10000)
#     steps = length(βs)
#     sres = zeros(steps)
#     # L, β, α. q, N, J
#     Threads.@threads for i=1:steps
#         println(i, " of ", steps)
#         sres[i] = MatrixSD.sre_saddlepoint(L, βs[i], α, q, N, J, max_iters=max_iters)
#         println("(T, SRE) = (", 1/βs[i], ", ", sres[i], ")")
#     end

#     return sres
# end


function time_invariance(M, β)
    L, _ = size(M)
    Δτ = β / L
    Δs = collect(0:(L-1))
    M_avgs = zeros(L)
    M_stds = zeros(L)
    for k=1:L
        Δ = Δs[k]
        Ms = zeros(L)
        for i=1:L
            j = (i + Δ - 1) % L + 1
            Ms[i] = sign(j-i) * M[i, j]
        end
        M_avgs[k] = mean(Ms)
        M_stds[k] = std(Ms)
    end
    return Δτ * Δs, M_avgs, M_stds
end

# begin

# N = 1
# J = 1.
# q = 4
# M = 1
# L = 1000

# Ts = LinRange(0.5, 2, 20)

# βs = 1.0./Ts
# free_energies = zeros(length(βs))
# Σ_init = zeros(L, L)

# for i in reverse(eachindex(βs))
#     println(i)
#     β = βs[i]
#     syk = SYK.SYKData(N, J, q, M, β)
#     global free_energies[i], Σ_init = SYKMatrix.free_energy(L, syk; Σ_init=Σ_init)
# end

# p = plot(Ts, free_energies, label="J = 1, q = 4, L=1000")
# xaxis!("T")
# yaxis!("F(T)")

# plot!(Ts, -Ts * log(2) / 2 - 1/(4*q^2) * 1.0 ./ Ts, label="expectation")
# display(p)

# end

# begin

# N = 1
# J = 1.
# q = 4
# M = 1
# L = 2000

# Ts = LinRange(1, 10, 10)

# βs = 1.0./Ts
# free_energies = zeros(length(βs))
# Σ_init = zeros(L, L)

# for i in reverse(eachindex(βs))
#     println(i)
#     β = βs[i]
#     syk = SYK.SYKData(N, J, q, M, β)
#     global free_energies[i], Σ_init = SYKMatrix.free_energy(L, syk; Σ_init=Σ_init, max_iters=1000)
# end

# p = plot(Ts, free_energies, label="J = 1, q = 4, L=2000")
# xaxis!("T")
# yaxis!("F(T)")

# plot!(Ts, SYK.high_temp_free_energy.(βs, q, J), label="expectation")
# display(p)

# end

# begin

# N = 1
# J = 1.
# q = 4
# M = 1
# L = 500

# Ts = LinRange(1, 10, 10)

# βs = 1.0./Ts
# renyi2s = zeros(length(βs))

# Σ_β_init = zeros(L, L)
# Σ_2β_init = zeros(4L, 4L)

# for i in reverse(eachindex(βs))
#     println(i)
#     β = βs[i]
#     syk = SYK.SYKData(N, J, q, M, β)
#     global renyi2s[i], Σ_β_init, Σ_2β_init = SYKMatrix.renyi2(L, syk; Σ_β_init=Σ_β_init, Σ_2β_init=Σ_2β_init, max_iters=1000)
# end

# p = plot(Ts, renyi2s, label="J = 1, q = 4, L=1000")
# xaxis!("T")
# yaxis!("S_2")



# end

# L = 1000
# L_rep = L÷2

# β = 1

# Δτ = β/L_rep

# syk = SYKData(1, 1, 4, 1, β)

# I_rep = [1 0; 0 1]

# D_minus = SREMatrix.differential(L_rep, anti_periodic=true)
# D_plus = SREMatrix.differential(L_rep; anti_periodic=false)

# D_minus_rep = kron(I_rep, D_minus)
# D_plus_rep = kron(I_rep, D_plus)

# purity, Σ = SYKMatrix.log_purity(L, syk)
# Σ

# prop_minus = D_minus_rep - Δτ^2 * Σ
# prop_plus = D_plus_rep - Δτ^2 * Σ

# pfaff_minus = sqrt(det(prop_minus))
# pfaff_plus = sqrt(det(prop_plus))

# p_plus = pfaff_plus / (pfaff_minus + pfaff_plus)

# G = p_plus * inv(prop_plus) + (1-p_plus) * inv(prop_minus)

# Σ_new = syk.J * G.^(syk.q-1)

# sqrt(det(D_minus_rep - Δτ^2 * Σ_new))
# sqrt(det(D_plus_rep - Δτ^2 * Σ_new))

# inv(SREMatrix.differential(8; anti_periodic=true))

# L = 2000
# β = 100
# syk2 = SYKData(1, 1, 4, 4, β)
# Σ_init = syk2.J * inv(SREMatrix.differential(L, anti_periodic=true))
# Σ, G,  = SREMatrix.schwinger_dyson(L, syk2, Σ_init=Σ_init)
# Σ

begin

N = 1
J = 1.
q = 4
M = 4
L = 4000

βs = LinRange(1, 10, 100)
sres = zeros(length(βs))

Σ_init = J * inv(SREMatrix.differential(L)).^(q-1)

Σ_M_init = Σ_init
Σ_2_init = Σ_init
Σ_Z_init = Σ_init

for i in eachindex(βs)
    println(i)
    β = βs[i]
    syk = SYK.SYKData(N, J, q, M, β)
    global sres[i], Σ_M_init, Σ_2_init, Σ_Z =
        SREMatrix.sre(L, syk; Σ_M_init=Σ_M_init, Σ_2_init=Σ_2_init, Σ_Z_init=Σ_Z_init,max_iters=1000)
end

p = plot(βs, sres, label="J = 1, q = 4, L=4000")
xaxis!("β")
yaxis!("M")


end

N = 1
J = 1.
q = 4
M = 4
L = 6000
β = 100

Σ_init = J * inv(SREMatrix.differential(L)).^(q-1)

Σ_M_init = Σ_init
Σ_2_init = Σ_init
Σ_Z_init = Σ_init

syk = SYK.SYKData(N, J, q, M, β)

SREMatrix.sre(L, syk; Σ_M_init=Σ_M_init, Σ_2_init=Σ_2_init, Σ_Z_init=Σ_Z_init,max_iters=1000)


ps = [
    0.05659056566204615
0.04308449933997857
0.044543611517172926
0.04483322040837825
0.04503538593662192
0.04517627260177893
0.045274365443746765
0.0453426195818244
0.04539009065900238
0.04542309687913877
0.04544604089545577
0.04546198785921402
0.04547307043904106
0.04548077187049615
0.04548612341387994
0.045489841933511986
0.04549242567439033
0.04549422089860226
0.045495468228688635
0.04549633486800147
0.045496936998432345
0.04549735534738653
0.04549764600579936
0.04549784794625743
0.045497988247135066
0.04549808572221854
0.045498153443186154
0.04549820049195649
0.04549823317861905
0.045498255887050504
0.0454982716629775
0.04549828262254651
0.0454982902355023
0.04549829552241239
0.04549829919075839
0.045498301728576246
0.04549830346639442
0.045498304613455186
0.045498305266305904
0.04549830537530644
0.04549830462646499
0.045498302133035975
0.04549829567865475
0.0454982798937282
0.04549824188236316
0.04549815075049823
0.045497932539663284
0.04549741023079231
0.04549616013111442
0.045493168013630396
0.045486005241599334
0.04546885161852242
0.04542773230787927
0.04532893757852373
0.04509024932663519
0.0448568208008295
0.04446694929628769
0.04418065673288445
0.043800164281173844
0.04329169709098993
0.04260643957189848
0.04217663419768959
0.04166926312015347
0.041067355024306834
0.040348936998864826
0.039485011326157914
0.038436446636837665
0.03782854277128414
0.037151421347463985
0.03639443284916548
0.03554473734261117
0.034586795799594894
0.03350180892211142
0.0322672420560295
0.030856876888060346
0.03008488300677929
0.02926097149257338
0.02838396285795165
0.027455034713732996
0.02647962761847261
0.02547060032353813
0.02445325040279172
0.023472669000887906
0.023039970337897037
0.02265111930261824
0.022320609828734062
0.02206404177570944
0.021896958322785032
0.021833230598492556
0.021883236498831768
0.02205227678333442
0.02233972090185168
0.022739183167636304
0.02323966345944002
0.02382725624420458
0.0244869208660465
0.025203926231024562
0.025964804460964136
0.026757834936472897
0.027573175312029328
0.028402772585671504
0.029240162576225456
0.03008023065586168
0.030918975817678523
0.03175329861939032
0.03258082040776141
0.033399734124535244
0.03420868366287898
0.03500666755804096
0.03579296270765436
0.03656706423089078
0.03732863815924638
0.03807748424853832
0.038813506737460764
0.03953669133178332
0.04024708706375636
0.04094479197143446
0.041629941774981784
0.04230270090930179
0.042963255412644466
0.04361180728209758
0.04424856998931688
0.04487376491829059
0.04548761853629626
0.0460903601500982
0.046682220129169484
0.04726342850418019
0.047834213865354226
0.04839480250257046
0.04894541773995424
0.049486279426259994
0.05001760355209075
0.050539601967394245
0.0510524821817858
0.051556447230152944
0.052051695590899415
0.05253842114585485
0.053016813174996846
0.05348705637700528
0.05394933091109491
0.054403812455056696
0.0548506722765633
0.055290077313270534
0.05572219026097368
0.05614716966615152
0.05656517002234199
0.05697634186856871
0.057380831889360724
0.05777878301402221
0.058170334516643565
0.0585556221142784
0.05893477806426523
0.0593079312593873
0.05967520732178938
0.060036728693812075
0.060392614727477145
0.06074298177103771
0.0610879432531719
0.061427609765186825
0.061762089140281466
0.062091486530495295
0.062415904481759356
0.06273544300577459
0.06305019965019674
0.06336026956659026
0.06366574557583758
0.06396671823170744
0.06426327588226288
0.06455550472948798
0.06484348888659942
0.06512731043408912
0.06540704947328159
0.0656827841789162
0.06595459084971199
0.06622254395701171
0.06648671619270605
0.06674717851517946
0.06700400019353463
0.06725724885151775
0.06750699050902764
0.06775328962289819
0.06799620912673114
0.06823581046881236
0.06847215364988139
0.06870529725908789
0.06893529850913113
0.06916221327060805
0.06938609610538005
0.06960700029863699
0.06982497789060743
0.07004007970717516
0.07025235538961251
0.07046185342371858
0.0706686211680368
0.07087270488136213
0.07107414974970887
0.07127299991237414
0.07146929848746164
0.07166308759682131
0.07185440839007105
0.07204330106853764
0.07222980490805594
0.07241395828173537
0.07259579868158543
0.07277536274024064
0.07295268625184592
0.07312780419224325
0.07330075073900351
0.0734715592911586
0.07364026248777862
0.07380689222677424
0.07397147968293676
0.0741340553256779
0.07429464893622653
0.07445328962460869
0.07461000584595018
0.07476482541688509
0.074917775531071
0.07506888277428472
0.07521817314009817
0.07536567204392955
0.07551140433757522
0.07565539432330752
0.07579766576721406
0.07593824191289543
0.07607714549428801
0.07621439874832624
0.07635002342760046
0.07648404081216098
0.07661647172175577
0.07674733652698566
0.07687665516097594
0.07700444713010053
0.07713073152495059
0.07725552703077108
0.07737885193778572
0.07750072415092643
0.07762116120010672
0.07774018024927398
0.07785779810612496
0.07797403123087608
0.07808889574533921
0.07820240744148561
0.07831458178991146
0.07842543394800272
0.0785349787681848
0.07864323080555478
0.07875020432552372
0.07885591331152322
0.07896037147203061
0.07906359224781817
0.07916558881868642
0.07926637411053385
0.07936596080170052
0.07946436132949228
0.07956158789642201
0.07965765247627475
0.07975256682021652
0.07984634246250463
0.07993899072619463
0.08003052272857247
0.08012094938669888
0.08021028142262687
0.08029852936863935
0.08038570357179971
0.08047181419957901
0.08055687124400866
0.08064088452664321
0.08072386370295673
0.08080581826691283
0.08088675755509787
0.08096669075118543
0.08104562688988295
0.08112357486095681
0.0812005434133663
0.08127654115874011
0.0813515765755046
0.08142565801235166
0.0814987936918085
0.08157099171389781
0.08164226005940263
0.08171260659319565
0.08178203906782595
0.08185056512633403
0.08191819230557339
0.0819849280393645
0.08205077966149184
0.08211575440841948
0.08217985942253409
0.08224310175486728
0.08230548836768982
0.08236702613763867
0.08242772185807877
0.08248758224184685
0.08254661392401723
0.08260482346422196
0.08266221734940749
0.0827188019960269
0.08277458375283296
0.08282956890309288
0.08288376366692933
0.08293717420398596
0.0829898066153216
0.08304166694591347
0.08309276118720267
0.08314309527893535
0.08319267511153233
0.08324150652847433
0.08328959532846757
0.08333694726731423
0.0833835680605258
0.08342946338526776
0.08347463888264187
0.0835191001595411
0.08356285279131574
0.083605902323418
0.08364825427377119
0.08368991413502508
0.08373088737640966
0.08377117944624647
0.08381079577365967
0.08384974177128969
0.08388802283702743
0.0839256443562829
0.0839626117043082
0.08399893024847344
0.08403460535015687
0.08406964236726876
0.08410404665665909
0.08413782357591663
0.08417097848612043
0.08420351675418929
0.08423544375476226
0.08426676487323181
0.08429748550767203
0.08432761107171301
0.08435714699659602
0.08438609873407812
0.08441447175896638
0.0844422715714485
0.08446950370015849
0.08449617370452157
0.08452228717777452
0.0845478497496358
0.08457286708925538
0.08459734490792188
0.08462128896242901
0.08464470505767988
0.08466759905010882
0.08468997685050413
0.08471184442765627
0.0847332078113797
0.08475407309566864
0.0847744464428461
0.08479433408617262
0.08481374233423906
0.08483267757417885
0.08485114627544542
0.08486915499395858
0.08488671037573552
0.08490381916124418
0.08492048818907581
0.08493672440055602
0.08495253484415737
0.08496792667940055
0.08498290718195041
0.08499748374813039
0.08501166389956695
0.08502545528803263
0.0850388657007378
0.08505190306522893
0.08506457545478453
0.08507689109370756
0.08508885836302321
0.08510048580568784
0.08511178213313643
0.08512275623067136
0.08513341716369638
0.0851437741840718
0.08515383673639855
0.08516361446472705
0.08517311721919828
0.08518235506291962
0.0851913382789732]

plot(1:384, ps)
